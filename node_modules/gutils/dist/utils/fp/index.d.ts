import { curry } from './curry';
type AnyFunction = (...args: any[]) => any;
declare const compose: (...fns: AnyFunction[]) => (x: any) => any;
declare const partial: ((predicate: AnyFunction, arr: any[]) => any) & ((predicate: AnyFunction) => (arr: any[]) => any);
declare const ifElse: ((predicate: AnyFunction, onTrue: AnyFunction, onFalse: AnyFunction) => (...args: unknown[]) => any) & ((predicate: AnyFunction, onTrue: AnyFunction) => (onFalse: AnyFunction) => (...args: unknown[]) => any) & ((predicate: AnyFunction) => ((onTrue: AnyFunction, onFalse: AnyFunction) => (...args: unknown[]) => any) & ((onTrue: AnyFunction) => (onFalse: AnyFunction) => (...args: unknown[]) => any));
declare const constant: <T>(value: T) => () => T;
declare const get: ((path: string | string[], obj: Record<string, any>) => any) & ((path: string | string[]) => (obj: Record<string, any>) => any);
declare const getOr: ((defaultValue: any, path: string | string[], obj: Record<string, any>) => any) & ((defaultValue: any, path: string | string[]) => (obj: Record<string, any>) => any) & ((defaultValue: any) => ((path: string | string[], obj: Record<string, any>) => any) & ((path: string | string[]) => (obj: Record<string, any>) => any));
export { curry, compose, partial, ifElse, constant, get, getOr };
