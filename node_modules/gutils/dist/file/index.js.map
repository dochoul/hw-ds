{
  "version": 3,
  "sources": ["../../../src/file/getFileExtension/index.ts", "../../../src/file/convertFixedUnitFileSize/types.ts", "../../../src/file/convertFixedUnitFileSize/index.ts"],
  "sourcesContent": ["/**\n * @description \uD30C\uC77C \uC774\uB984\uC744 \uBC1B\uC544 \uD655\uC7A5\uC790\uBA85\uC744 \uBC18\uD658\uD574\uC8FC\uB294 \uD568\uC218\n * @param fileName \uD30C\uC77C \uC774\uB984\n * @returns \uD655\uC7A5\uC790\uBA85(ex. 'txt')\n */\nexport const getFileExtension = (fileName: string) => {\n  return fileName.slice((Math.max(0, fileName.lastIndexOf('.')) || Infinity) + 1).toLowerCase();\n};\n", "type FileSizeUnit = 'Byte' | 'KB' | 'MB' | 'GB' | 'TB';\n\nexport const CONVERSION_CONSTANT = 1024 as const;\n\nexport const exponentByFileSizeUnit = {\n  Byte: 0,\n  KB: 1,\n  MB: 2,\n  GB: 3,\n  TB: 4,\n} as const;\n\nexport interface ConvertFixedUnitFileSizeParams {\n  /** \uBCC0\uD658\uB420 \uD0C0\uAC9F \uD30C\uC77C \uC0AC\uC774\uC988 */\n  fileSize: number;\n  /** \uBCC0\uD658 \uC2DC \uAE30\uC900\uC774 \uB420 \uD30C\uC77C \uC0AC\uC774\uC988 \uB2E8\uC704 */\n  criterialFileSizeUnit: FileSizeUnit;\n  /** \uBCC0\uD658 \uC2DC \uBC18\uD658\uD560 \uAC12\uC758 \uC18C\uC218\uC810 \uAC1C\uC218 */\n  numberOfDecimalPoints: number;\n}\n", "import { CONVERSION_CONSTANT, ConvertFixedUnitFileSizeParams, exponentByFileSizeUnit } from './types';\n\n/**\n * @description \uD0C0\uAC9F \uD30C\uC77C \uC0AC\uC774\uC988\uB97C \uC9C0\uC815\uD55C \uD30C\uC77C \uC0AC\uC774\uC988 \uB2E8\uC704, \uC18C\uC218\uC810 \uAC1C\uC218\uB85C \uBCC0\uD658\uD574\uC8FC\uB294 \uD568\uC218\n * @returns \uBCC0\uD658\uB41C \uD30C\uC77C \uC0AC\uC774\uC988 \uBC18\uD658\n */\nexport const convertFixedUnitFileSize = ({ fileSize, criterialFileSizeUnit, numberOfDecimalPoints }: ConvertFixedUnitFileSizeParams) => {\n  const validFileSize = fileSize < 0 ? 0 : fileSize;\n  const digits = numberOfDecimalPoints < 0 ? 0 : Math.round(numberOfDecimalPoints);\n  const fixedUnitFileSize = validFileSize / Math.pow(CONVERSION_CONSTANT, exponentByFileSizeUnit[criterialFileSizeUnit]);\n  return fixedUnitFileSize.toFixed(digits);\n};\n"],
  "mappings": "AAKO,IAAMA,EAAoBC,GACxBA,EAAS,OAAO,KAAK,IAAI,EAAGA,EAAS,YAAY,GAAG,CAAC,GAAK,KAAY,CAAC,EAAE,YAAY,ECFvF,IAAMC,EAAyB,CACpC,KAAM,EACN,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,CACN,ECJO,IAAMC,EAA2B,CAAC,CAAE,SAAAC,EAAU,sBAAAC,EAAuB,sBAAAC,CAAsB,IAAsC,CACtI,IAAMC,EAAgBH,EAAW,EAAI,EAAIA,EACnCI,EAASF,EAAwB,EAAI,EAAI,KAAK,MAAMA,CAAqB,EAE/E,OAD0BC,EAAgB,KAAK,IAAI,KAAqBE,EAAuBJ,CAAqB,CAAC,GAC5F,QAAQG,CAAM,CACzC",
  "names": ["getFileExtension", "fileName", "exponentByFileSizeUnit", "convertFixedUnitFileSize", "fileSize", "criterialFileSizeUnit", "numberOfDecimalPoints", "validFileSize", "digits", "exponentByFileSizeUnit"]
}
