{
  "version": 3,
  "sources": ["../../../src/validators/isCorporateRegiNumber/index.ts", "../../../src/validators/isEmail/index.ts", "../../../src/validators/isEmailDomain/index.ts", "../../../src/validators/isEmptyObject/index.ts", "../../../src/validators/isMobilePhone/index.ts", "../../../src/validators/isNumeric/index.ts", "../../../src/validators/isOverFileSize/types.ts", "../../../src/validators/isOverFileSize/index.ts", "../../../src/validators/isPhoneNum/index.ts", "../../../src/validators/isTextOverMaxByte/index.ts"],
  "sourcesContent": ["/**\n * @description : \uC0AC\uC5C5\uC790 \uBC88\uD638 \uC720\uD6A8\uC131 \uCCB4\uD06C (\uC608\uC2DC : 123-45-67891)\n * @param corpNumStr \uC0AC\uC5C5\uC790 \uBC88\uD638\n * @link https://myhappyman.tistory.com/129\n * @returns Boolean\n */\nexport const isCorporateRegiNumber = (corpNumStr: string): boolean => {\n  const numberMap = corpNumStr\n    .replace(/-/gi, '')\n    .split('')\n    .map((d) => parseInt(d, 10));\n\n  if (numberMap.length === 10) {\n    const keyArr = [1, 3, 7, 1, 3, 7, 1, 3, 5];\n\n    let chk = keyArr.reduce((acc, cur, idx) => {\n      acc += cur * numberMap[idx];\n      return acc;\n    }, 0);\n\n    chk += Math.floor((keyArr[8] * numberMap[8]) / 10);\n    return Math.floor(numberMap[9]) === (10 - (chk % 10)) % 10;\n  }\n\n  return false;\n};\n", "/**\n * \uC774\uBA54\uC77C \uD615\uC2DD\uC778\uC9C0 \uD655\uC778\uD569\uB2C8\uB2E4.\n * @param value \uC774\uBA54\uC77C\n */\nexport const isEmail = (value: string) => {\n  const pattern = /^[a-z0-9%+_-]+(?:\\.[a-z0-9%+_-]+)*@([a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+([a-z]+|xn--[a-z0-9]+)$/giu;\n\n  return pattern.exec(value) !== null;\n};\n", "/**\n * \uC774\uBA54\uC77C\uC5D0 \uC0AC\uC6A9\uB420 \uC218 \uC788\uB294 \uB3C4\uBA54\uC778\uC778\uC9C0 \uD655\uC778\uD569\uB2C8\uB2E4.\n * .\uD55C\uAD6D, .\u4E2D\u56FD \uACFC \uAC19\uC740 IDN \uB3C4\uBA54\uC778\uC740 punycode \uB85C \uBCC0\uD658 \uD6C4 \uC0AC\uC6A9\uD558\uC138\uC694. ex) \uD55C\uAE00\uC0AC\uB791.\uD55C\uAD6D -> xn--bj0bl5p1rhhrv.xn--3e0b707e\n * @param value \uB3C4\uBA54\uC778\n */\nexport const isEmailDomain = (value: string) => {\n  const pattern = /^([a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+([a-z]+|xn--[a-z0-9]+)$/giu;\n\n  return pattern.exec(value) !== null;\n};\n", "/**\n * @description : Object \uAC00 \uBE48\uAC12\uC778\uC9C0 \uCCB4\uD06C\n * @param param Object\n * @returns Boolean\n */\nexport const isEmptyObject = (param: object): boolean => param.constructor === Object && Object.keys(param).length === 0;\n", "/**\n * @description : \uD734\uB300\uD3F0 \uBC88\uD638 \uC720\uD6A8\uC131 \uCCB4\uD06C\n * @param phoneNum \uD734\uB300\uD3F0 \uBC88\uD638\n * @returns Boolean\n */\nexport const isMobilePhone = (phoneNum: string) => {\n  const patternPhone = /^(?:(010-\\d{4})|(01[1|6|7|8|9]-\\d{3,4}))-(\\d{4})$/;\n  return patternPhone.test(phoneNum);\n};\n", "/**\n * @description : n\uC774 \uC22B\uC790 or \uC22B\uC790\uD615\uC2DD\uC778\uC9C0 \uCCB4\uD06C\n * @param n any\n * @returns Boolean\n */\nexport const isNumeric = (n: any): boolean => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n", "type FileSizeUnit = 'Byte' | 'KB' | 'MB' | 'GB' | 'TB';\n\nexport const exponentByFileSizeUnit = {\n  Byte: 0,\n  KB: 1,\n  MB: 2,\n  GB: 3,\n  TB: 4,\n} as const;\n\nexport const CONVERSION_CONSTANT = 1024 as const;\n\nexport interface OverFileSizeParams {\n  /** \uAE30\uC900 \uD30C\uC77C \uC0AC\uC774\uC988\uC640 \uBE44\uAD50\uD790 \uD0C0\uAC9F \uD30C\uC77C \uC0AC\uC774\uC988 */\n  fileSize: number;\n  /** \uAE30\uC900\uC774 \uB420 \uD30C\uC77C \uC0AC\uC774\uC988 */\n  criterialFileSize: number;\n  /** \uAE30\uC900\uC774 \uB420 \uD30C\uC77C \uC0AC\uC774\uC988 \uB2E8\uC704 */\n  criterialFileSizeUnit: FileSizeUnit;\n  /** \uC774\uC0C1(>=)\uC744 \uCCB4\uD06C\uD560 \uC9C0 \uC5EC\uBD80  */\n  hasEqualSign: boolean;\n}\n", "import { CONVERSION_CONSTANT, exponentByFileSizeUnit, OverFileSizeParams } from './types';\n\n/**\n * @description \uD0C0\uAC9F \uD30C\uC77C \uC0AC\uC774\uC988\uAC00 \uAE30\uC900 \uD30C\uC77C \uC0AC\uC774\uC988 \uC774\uC0C1 / \uCD08\uACFC\uC778\uC9C0 \uD310\uBCC4\uD574\uC8FC\uB294 \uD568\uC218\n * @returns \uC774\uC0C1 / \uCD08\uACFC\uB77C\uBA74 true \uC544\uB2C8\uB77C\uBA74 false\n */\nexport const isOverFileSize = ({ fileSize, criterialFileSize, criterialFileSizeUnit, hasEqualSign }: OverFileSizeParams) => {\n  const validFileSize = fileSize < 0 ? 0 : fileSize;\n  const validCriterialFileSize = criterialFileSize < 0 ? 0 : criterialFileSize;\n  const diffFileSize =\n    validFileSize - validCriterialFileSize * Math.pow(CONVERSION_CONSTANT, exponentByFileSizeUnit[criterialFileSizeUnit]);\n  return hasEqualSign ? diffFileSize >= 0 : diffFileSize > 0;\n};\n", "export const isPhoneNum = (value: string) => {\n  const pattern = /^([0-9]{2,4})-([0-9]{3,4})-([0-9]{4})$/;\n  return pattern.test(value);\n};\n", "/**\n * @url https://gitlab.gabia.com/customer/www.gabia.com/-/blob/develop/assets/js/util/byteCalculator.js\n * @description \uAE30\uC900 \uBC14\uC774\uD2B8\uBCF4\uB2E4 \uB300\uC0C1 \uBC14\uC774\uD2B8\uAC00 \uB354 \uD070\uAC00\uB97C \uD310\uB2E8\uD558\uB294 \uD568\uC218\n * @params {string}\n * @params {number}\n * @return {boolean}\n */\nexport const isTextOverMaxByte = (text: string, maxByte: number): boolean => {\n  const totalByte =\n    Array.from(text)\n      .map((char) => {\n        const uniCode = char.charCodeAt(0).toString(16);\n        return uniCode.length >= 4 ? 2 : 1;\n      })\n      .reduce((acc, value) => acc + value, 0) || 0;\n\n  return totalByte > maxByte;\n};\n"],
  "mappings": "AAMO,IAAMA,EAAyBC,GAAgC,CACpE,IAAMC,EAAYD,EACf,QAAQ,MAAO,EAAE,EACjB,MAAM,EAAE,EACR,IAAKE,GAAM,SAASA,EAAG,EAAE,CAAC,EAE7B,GAAID,EAAU,SAAW,GAAI,CAC3B,IAAME,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAErCC,EAAMD,EAAO,OAAO,CAACE,EAAKC,EAAKC,KACjCF,GAAOC,EAAML,EAAUM,CAAG,EACnBF,GACN,CAAC,EAEJ,OAAAD,GAAO,KAAK,MAAOD,EAAO,CAAC,EAAIF,EAAU,CAAC,EAAK,EAAE,EAC1C,KAAK,MAAMA,EAAU,CAAC,CAAC,KAAO,GAAMG,EAAM,IAAO,EAC1D,CAEA,MAAO,EACT,ECrBO,IAAMI,EAAWC,GACN,oGAED,KAAKA,CAAK,IAAM,KCF1B,IAAMC,EAAiBC,GACZ,kEAED,KAAKA,CAAK,IAAM,KCH1B,IAAMC,EAAiBC,GAA2BA,EAAM,cAAgB,QAAU,OAAO,KAAKA,CAAK,EAAE,SAAW,ECAhH,IAAMC,EAAiBC,GACP,oDACD,KAAKA,CAAQ,ECF5B,IAAMC,EAAaC,GACjB,CAAC,MAAM,WAAWA,CAAC,CAAC,GAAK,SAASA,CAAC,ECJrC,IAAMC,EAAyB,CACpC,KAAM,EACN,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,CACN,EAEaC,EAAsB,KCJ5B,IAAMC,EAAiB,CAAC,CAAE,SAAAC,EAAU,kBAAAC,EAAmB,sBAAAC,EAAuB,aAAAC,CAAa,IAA0B,CAC1H,IAAMC,EAAgBJ,EAAW,EAAI,EAAIA,EACnCK,EAAyBJ,EAAoB,EAAI,EAAIA,EACrDK,EACJF,EAAgBC,EAAyB,KAAK,IAAIE,EAAqBC,EAAuBN,CAAqB,CAAC,EACtH,OAAOC,EAAeG,GAAgB,EAAIA,EAAe,CAC3D,ECZO,IAAMG,EAAcC,GACT,yCACD,KAAKA,CAAK,ECKpB,IAAMC,EAAoB,CAACC,EAAcC,KAE5C,MAAM,KAAKD,CAAI,EACZ,IAAKE,GACYA,EAAK,WAAW,CAAC,EAAE,SAAS,EAAE,EAC/B,QAAU,EAAI,EAAI,CAClC,EACA,OAAO,CAACC,EAAKC,IAAUD,EAAMC,EAAO,CAAC,GAAK,GAE5BH",
  "names": ["isCorporateRegiNumber", "corpNumStr", "numberMap", "d", "keyArr", "chk", "acc", "cur", "idx", "isEmail", "value", "isEmailDomain", "value", "isEmptyObject", "param", "isMobilePhone", "phoneNum", "isNumeric", "n", "exponentByFileSizeUnit", "CONVERSION_CONSTANT", "isOverFileSize", "fileSize", "criterialFileSize", "criterialFileSizeUnit", "hasEqualSign", "validFileSize", "validCriterialFileSize", "diffFileSize", "CONVERSION_CONSTANT", "exponentByFileSizeUnit", "isPhoneNum", "value", "isTextOverMaxByte", "text", "maxByte", "char", "acc", "value"]
}
