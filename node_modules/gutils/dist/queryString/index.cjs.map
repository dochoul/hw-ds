{
  "version": 3,
  "sources": ["../../../src/queryString/index.ts", "../../../src/queryString/getQueryParams/index.ts", "../../../src/queryString/queryStringConvertor/index.ts"],
  "sourcesContent": ["export * from './getQueryParams';\nexport * from './queryStringConvertor';\n", "/**\n * @description history \uBAA8\uB4DC\uB97C \uC0AC\uC6A9\uD558\uC9C0 \uC54A\uC558\uC744\uB54C\uC5D0 this.$route.query \uAC00 \uB3D9\uC791\uD558\uC9C0 \uC54A\uB294 \uC774\uC288\uB97C \uCC98\uB9AC\uD558\uAE30 \uC704\uD574 \uC0AC\uC6A9\n * @returns Object\n */\nexport const getQueryParams = (): Record<string, string> => {\n  const params: Record<string, string> = {};\n\n  window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, (any: string, key: string, value: string) => {\n    params[key] = value;\n    return '';\n  });\n\n  return params;\n};\n", "import { RecToQueryParameter } from './types';\n\n/**\n * @description \uAC1D\uCCB4\uB97C \uCFFC\uB9AC \uD30C\uB77C\uBBF8\uD130\uB85C \uBCC0\uACBD\uD574\uC8FC\uB294 \uBA54\uC11C\uB4DC\n * @param query url query\n * @returns string \uD615\uD0DC\uB85C \uBCC0\uD658\uB41C query string \uAC12\n */\nexport const queryStringConvertor = (query: any) => {\n  /** primitive type\uC778\uC9C0 \uD655\uC778\uD558\uB294 \uD568\uC218 */\n  const isPrimitive = (value: any) => ['string', 'number', 'boolean'].some((type) => type === typeof value);\n\n  /** \uC911\uCCA9 \uAC1D\uCCB4\uB97C \uC21C\uD68C\uD558\uBA74\uC11C query string\uC744 \uB9CC\uB4DC\uB294 \uD568\uC218 */\n  const recToQuery = ({ key, queryChunk }: RecToQueryParameter): string => {\n    if (isPrimitive(queryChunk)) {\n      return `${key}=${queryChunk}`;\n    }\n\n    return Object.keys(queryChunk)\n      .map((queryKey) => {\n        return recToQuery({\n          key: `${key}[${queryKey}]`,\n          queryChunk: queryChunk[queryKey],\n        });\n      })\n      .join('&');\n  };\n\n  if (!query) {\n    return '';\n  }\n\n  if (isPrimitive(query)) {\n    return query;\n  }\n\n  return Object.keys(query)\n    .map((queryKey) => {\n      return recToQuery({\n        key: queryKey,\n        queryChunk: query[queryKey],\n      });\n    })\n    .join('&');\n};\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,yBAAAC,IAAA,eAAAC,EAAAJ,GCIO,IAAMK,EAAiB,IAA8B,CAC1D,IAAMC,EAAiC,CAAC,EAExC,cAAO,SAAS,OAAO,QAAQ,0BAA2B,CAACC,EAAaC,EAAaC,KACnFH,EAAOE,CAAG,EAAIC,EACP,GACR,EAEMH,CACT,ECNO,IAAMI,EAAwBC,GAAe,CAElD,IAAMC,EAAeC,GAAe,CAAC,SAAU,SAAU,SAAS,EAAE,KAAMC,GAASA,IAAS,OAAOD,CAAK,EAGlGE,EAAa,CAAC,CAAE,IAAAC,EAAK,WAAAC,CAAW,IAChCL,EAAYK,CAAU,EACjB,GAAGD,CAAG,IAAIC,CAAU,GAGtB,OAAO,KAAKA,CAAU,EAC1B,IAAKC,GACGH,EAAW,CAChB,IAAK,GAAGC,CAAG,IAAIE,CAAQ,IACvB,WAAYD,EAAWC,CAAQ,CACjC,CAAC,CACF,EACA,KAAK,GAAG,EAGb,OAAKP,EAIDC,EAAYD,CAAK,EACZA,EAGF,OAAO,KAAKA,CAAK,EACrB,IAAKO,GACGH,EAAW,CAChB,IAAKG,EACL,WAAYP,EAAMO,CAAQ,CAC5B,CAAC,CACF,EACA,KAAK,GAAG,EAdF,EAeX",
  "names": ["queryString_exports", "__export", "getQueryParams", "queryStringConvertor", "__toCommonJS", "getQueryParams", "params", "any", "key", "value", "queryStringConvertor", "query", "isPrimitive", "value", "type", "recToQuery", "key", "queryChunk", "queryKey"]
}
